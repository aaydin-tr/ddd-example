// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aaydin-tr/e-commerce/domain/campaign (interfaces: CampaignRepository)

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	entity "github.com/aaydin-tr/e-commerce/entity"
	valueobject "github.com/aaydin-tr/e-commerce/valueobject"
	gomock "go.uber.org/mock/gomock"
)

// MockCampaignRepository is a mock of CampaignRepository interface.
type MockCampaignRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCampaignRepositoryMockRecorder
}

// MockCampaignRepositoryMockRecorder is the mock recorder for MockCampaignRepository.
type MockCampaignRepositoryMockRecorder struct {
	mock *MockCampaignRepository
}

// NewMockCampaignRepository creates a new mock instance.
func NewMockCampaignRepository(ctrl *gomock.Controller) *MockCampaignRepository {
	mock := &MockCampaignRepository{ctrl: ctrl}
	mock.recorder = &MockCampaignRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCampaignRepository) EXPECT() *MockCampaignRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCampaignRepository) Create(arg0 *entity.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCampaignRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCampaignRepository)(nil).Create), arg0)
}

// Exist mocks base method.
func (m *MockCampaignRepository) Exist(arg0 valueobject.Name) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockCampaignRepositoryMockRecorder) Exist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockCampaignRepository)(nil).Exist), arg0)
}

// Get mocks base method.
func (m *MockCampaignRepository) Get(arg0 valueobject.Name) (*entity.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*entity.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCampaignRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCampaignRepository)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockCampaignRepository) GetAll() []*entity.Campaign {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Campaign)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCampaignRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCampaignRepository)(nil).GetAll))
}
